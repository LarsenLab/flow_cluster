---
title: "flow_cluster"
format: html
editor: visual
---

Step1: Reading .fcs files using read.flowSet function from flowCore R package

Step2: Using Arcsinh transformation to normalize the fcs files. Read more \[<https://support.cytobank.org/hc/en-us/articles/206148057-About-the-Arcsinh-transform>\]

Step3: Create a Seurat Object using normalized counts from .fcs files

Step4: Run Dimensionality reduction, clustering and then visualize cells

Step5: Integrate Seurat objects to understand similarities and differences among cell-types learnt from each .fcs file

[mojaveazure/seurat-disk: Interfaces for HDF5-based Single Cell File Formats (github.com)](https://github.com/mojaveazure/seurat-disk)

### Additional resources

<https://github.com/keyes-timothy/tidytof>

<https://stemangiola.github.io/tidyseurat/>

# library

```{r}
library(flowCore)
library(ncdfFlow)
library(flowWorkspace)
library(Seurat)
library(tidyseurat)
library(readxl)
library(cowplot)
library(ggplot2)
library(stringr)
library(plot_ly)
# remotes::install_github("mojaveazure/seurat-disk")

library(RColorBrewer)
library(pheatmap)
library(ggpubr)
library(ggsignif)
library(Polychrome)
library(gridExtra)



library(tidyverse)
library(janitor)
library(reshape2)
library(matrixStats)
library(rstatix)
library(here)


source(here("source_func.R"))

# aesthetics

library(showtext)
library(sysfonts)
font_add("Avenir", "~/Library/Fonts/Avenir.ttf") # path to your Avenir.ttf file
# download Avenir-Book.ttf from https://github.com/platanus/fonts/blob/master/Avenir/Avenir-Book.ttf
# rename it as "Avenir.ttf" & put it under "/Users/weiwen_zhang/Library/Fonts"




```

```{r}
# if (!require(devtools)) install.packages("devtools")
# devtools::install_github("keyes-timothy/tidytof")

library(tidytof)

# BiocManager::install("FlowSOM")
# 
library(FlowSOM)
```

### Theme

```{r}
# initialize showtext
showtext_auto()

size = 10
tmp_theme = theme(
    
    text = element_text(size = size, family = "Avenir"),
    # y
    axis.title.y = element_text(size = size),
    axis.text.y = element_text(size = size),
    axis.ticks.y = element_line(size = 0.2, linetype = "solid", colour = "black"),
    axis.line.y = element_line(size = 0.4, linetype = "solid", colour = "black"),
    
    # x
    axis.title.x = element_text(size = size),
    axis.text.x = element_text(size = size),
    axis.ticks.x = element_line(size = 0.2, linetype = "solid", colour = "black"),
    axis.line.x = element_line(size = 0.4, linetype = "solid", colour = "black"),
    
    # panel
    panel.grid = element_blank(),  # remove background grid
    panel.grid.major = element_blank(),  # remove major grid lines
    panel.grid.minor = element_blank(),  # remove minor grid lines
    panel.border = element_blank(),  # remove panel borders
    panel.background = element_blank(),
    
    # facet
    strip.background = element_rect(colour = "gray", fill = "white", linewidth = 0.5, linetype = "solid"), 
    aspect.ratio = 1
  )
```

# read in FACS files

```{r}


input_dir = here("raw/ITN089ST_adapt")
input_dir = here("raw/20241029_Adapt_B_cell_lineage_cohort1")
fcs_files <- list.files(input_dir, pattern = ".fcs", full.names = TRUE)
fcs_files <- fcs_files[str_detect(fcs_files, "CD19\\+")]


# fcs_set = read.ncdfFlowSet(fcs_files, emptyValue = FALSE) 

```

#### Reading data with `tof_read_data`

```{r}
tidytof_example_data("phenograph")
#> [1] "/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph"
#> 
# data("phenograph_data")
```

```{r}
# phenograph <-
#     tidytof_example_data("phenograph") |>
#     tof_read_data()
# 
# phenograph |>
#     class()

```

### Our data tidytof

```{r}
adapt <-
    tof_read_data(input_dir) |> 
    clean_names()

class(adapt)

```

```{r}
# before preprocessing
# phenograph |>
#     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>
#     head()

# before preprocessing
adapt |>
    select(cd19_fj_comp_buv_c_a, cd20_fj_comp_red_a_a) |>
    head()
```

Transform Cytof cofactor 5, Flow cytometry cofactor 150

```{r}
# perform preprocessing
# phenograph <-
#     phenograph |>
#     tof_preprocess()
# 
# # inspect new values
# phenograph |>
#     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>
#     head()

# perform preprocessing
adapt <- adapt |>
    tof_preprocess(transform_fun = function(x) asinh(x/150)) |> 
    tof_preprocess(transform_fun = scale)


# inspect new values
adapt |>
    select(cd19_fj_comp_buv_c_a, cd20_fj_comp_red_a_a) |>
    head()

class(adapt)
```

```{r}
# phenograph <-
#     phenograph |>
#     # mutate the input tof_tbl
#     mutate(
#         PhenoGraph = as.character(PhenoGraph),
#         Condition = as.character(Condition)
#     )
# 
# phenograph |>
#     # use dplyr's select method to show that the columns have been changed
#     select(where(is.character)) |>
#     head()
# 
# class(phenograph)
```

### Create new variables

```{r}
adapt_files <- adapt |>
    select(file_name) |> 
    distinct()

adapt <- adapt |> 
    mutate(sample_id = str_remove(file_name, "\\.fcs")) |> 
    mutate(sample_id = str_remove(sample_id, "export_"))  |> 
    mutate(population = str_extract(sample_id, "CD19."))  |> 
   mutate(sample_id = str_remove(sample_id, "_B_cell Panel_BM_CD19-")) |> 
    mutate(time_point = str_extract(file_name, "V\\w+")) |> 
    mutate(visit = str_extract(time_point, "V\\w{0,2}(?=_)"))  |> 
    rename_with(~ str_remove(., "_fj_comp_.+")) |>
    rename_with(~ str_remove(., "\\|.+")) |> 
    rename_with(~ str_replace(., "-", "_")) |> 
    rename_with(str_to_lower)


# adapt_pos2 <- adapt_pos |>
#     separate(sample_id, into = c("study_id", "patient_id", "visit", "date", "panel", "drop", "source"), sep = "_", extra = "drop", remove = F) %>%
#     select(-drop) |>
#     unite("sample_id", study_id:population, remove = F)

# adapt_pos3 <- adapt |>
#     separate(sample_id, into = c("id", "visit"), sep = "V", remove = F)

class(adapt)



```

### metadata

```{r}


# phenograph_clusters <-
#     phenograph_data |>
#     tof_preprocess() |>
#     tof_cluster(method = "flowsom", cluster_cols = contains("cd"))
# 
# 
# phenograph_clusters <-
#     phenograph_clusters |>
#     tof_cluster(method = "phenograph", cluster_cols = contains("cd"))


```

```{r}

adapt_cd19_pos <- adapt |> 
    filter(population == "CD19+")

adapt_cd19_neg <- adapt |> 
    filter(population == "CD19-")
```

```{r}

clust_cols_adapt <- wrapr::qc(cd19, cd20, cd38, cxcr3, ig_m, ig_d, cd21, cd34, cd24, cd27, cxcr4, cxcr5, cd138, cd11c, bcma)
    
adapt_clusters_cd19_pos <-
    adapt_cd19_pos |>
    tof_cluster(method = "flowsom", 
                cluster_cols = clust_cols_adapt,
                num_metaclusters = 7)

adapt_clusters_cd19_neg <-
    adapt_cd19_neg |>
    tof_cluster(method = "flowsom", 
                cluster_cols = clust_cols_adapt,
                num_metaclusters = 12)


adapt_clusters <-
    adapt |>
    tof_cluster(method = "flowsom", 
                cluster_cols = clust_cols_adapt)

# ,
#                 num_metaclusters = 12

# adapt_clusters_cd19_neg <-
#     adapt_cd19_neg |>
#     tof_cluster(method = "phenograph", 
#                 cluster_cols = clust_cols_adapt,
#                 num_metaclusters = 8)
```

```{r}

# adapt_clusters_cd19_pos |>
#     # downsample
#     tof_downsample(
#         method = "constant",
#         group_cols = .flowsom_metacluster,
#         num_cells = 200
#     ) |>
#     # count the number of downsampled cells in each cluster
#    group_by(.flowsom_metacluster) |> 
#     summarise(n = n())



```

```{r}
# perform the dimensionality reduction
# phenograph_tsne <-
#     phenograph_clusters |>
#     tof_reduce_dimensions(method = "tsne")
# 
# # select only the tsne embedding columns using a tidyselect helper (contains)
# phenograph_tsne |>
#     select(contains("tsne")) |>
#     head()


adapt_clusters_cd19_neg_down <- adapt_clusters_cd19_neg |>
    # downsample
    tof_downsample(
        method = "constant",
        group_cols = visit,
        # group_cols = .flowsom_metacluster,
        # prop_cells = 0.25
        num_cells = 5000
    ) 

adapt_clusters_cd19_neg_tsne <-
    adapt_clusters_cd19_neg_down |>
    tof_reduce_dimensions(method = "tsne")


adapt_clusters_cd19_pos_down <- adapt_clusters_cd19_pos |>
    # downsample
    tof_downsample(
        method = "constant",
        group_cols = visit,
        # group_cols = .flowsom_metacluster,
        # prop_cells = 0.25
        num_cells = 5000
    ) 

adapt_clusters_cd19_pos_tsne <-
    adapt_clusters_cd19_pos_down |>
    tof_reduce_dimensions(method = "tsne")


adapt_clusters_down <- adapt_clusters |>
    # downsample
    tof_downsample(
        method = "constant",
        group_cols = visit,
        # group_cols = .flowsom_metacluster,
        # prop_cells = 0.25
        num_cells = 5000
    ) 

adapt_clusters_tsne <-
    adapt_clusters_down |>
    tof_reduce_dimensions(method = "tsne")
```

```{r}
set.seed(1234)

adapt_clusters_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL)+ 
scale_color_manual(values = colorRampPalette(brewer.pal(n = 11, name = "Spectral"))(length(unique(adapt_clusters_tsne$.flowsom_metacluster)))) +
  tmp_theme + 
  theme(aspect.ratio = 1) + 
  guides(color = FALSE)

adapt_clusters_cd19_pos_tsne |>
  ggplot(aes(x = .tsne1, y = .tsne2, color = as.factor(.flowsom_metacluster))) +  # Convert to factor if discrete
  geom_point() +
  theme_bw() +
  labs(fill = NULL) +
  facet_wrap(~ visit) +
  scale_color_manual(values = colorRampPalette(brewer.pal(n = 12, name = "Spectral"))(length(unique(adapt_clusters_cd19_pos_tsne$.flowsom_metacluster)))) +
  tmp_theme +
  theme(aspect.ratio = 1)  + 
  guides(color = "none")

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd19)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 9, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 


adapt_clusters_tsne |>
  plot_ly(x = .tsne1, y = .tsne2,
    color = ~seurat_clusters
  )
```

```{r}
# plot the tsne embeddings using color to distinguish between clusters
set.seed(1234)

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL)+ 
scale_color_manual(values = colorRampPalette(brewer.pal(n = 11, name = "Spectral"))(length(unique(adapt_clusters_cd19_pos_tsne$.flowsom_metacluster)))) +
  tmp_theme + 
  theme(aspect.ratio = 1) + 
  guides(color = FALSE)

adapt_clusters_cd19_pos_tsne |>
  ggplot(aes(x = .tsne1, y = .tsne2, color = as.factor(.flowsom_metacluster))) +  # Convert to factor if discrete
  geom_point() +
  theme_bw() +
  labs(fill = NULL) +
  facet_wrap(~ visit) +
  scale_color_manual(values = colorRampPalette(brewer.pal(n = 12, name = "Spectral"))(length(unique(adapt_clusters_cd19_pos_tsne$.flowsom_metacluster)))) +
  tmp_theme +
  theme(aspect.ratio = 1)  + 
  guides(color = "none")

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd19)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 9, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 


adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd38)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 9, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = bcma)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 9, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = ig_d)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 9, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 
#+ 
  #guides(color = FALSE)

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd138)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit)

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd138)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit)

adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL)


adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit)

adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd138)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit)

adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL)+ 
scale_color_manual(values = colorRampPalette(brewer.pal(n = 11, name = "Spectral"))(length(unique(adapt_clusters_cd19_pos_tsne$.flowsom_metacluster)))) +
  tmp_theme + 
  theme(aspect.ratio = 1) + 
  guides(color = FALSE)
```

```{r}
set.seed(1234)
adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) + 
scale_color_manual(values = colorRampPalette(brewer.pal(n = 12, name = "Spectral"))(length(unique(adapt_clusters_cd19_neg_tsne$.flowsom_metacluster)))) + 
  tmp_theme + 
  theme(aspect.ratio = 1) + 
  guides(color = FALSE)

adapt_clusters_cd19_neg_tsne |>
  ggplot(aes(x = .tsne1, y = .tsne2, color = as.factor(.flowsom_metacluster))) +  # Convert to factor if discrete
  geom_point() +
  theme_bw() +
  labs(fill = NULL) +
  facet_wrap(~ visit) +
  scale_color_manual(values = colorRampPalette(brewer.pal(n = 12, name = "Spectral"))(length(unique(adapt_clusters_cd19_neg_tsne$.flowsom_metacluster)))) +
  tmp_theme +
  theme(aspect.ratio = 1)  + 
  guides(color = "none")


adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd38)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 12, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 

adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = bcma)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 12, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 
#+ 
  #guides(color = FALSE)

adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd138)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit)

adapt_clusters_cd19_neg_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL)
```

```{r}
data(phenograph_data)


phenograph_data |>
    group_by(phenograph_cluster) |> 
    summarise(n = n())

```

\# Setting bins creates evenly spaced contours in the range of the data

v + geom_contour(bins = 3)

v + geom_contour(bins = 5)

\# }

```{r}
# phenograph_data |>
#     # preprocess all numeric columns in the dataset
#     tof_preprocess(undo_noise = FALSE) |>
#     # make a scatterplot
#     ggplot(aes(x = cd34, y = cd38)) +
#     geom_point(alpha = 0.5) +
#     scale_x_continuous(limits = c(NA, 1.5)) +
#     scale_y_continuous(limits = c(NA, 4)) +
#     theme_bw() 

adapt |>
    # preprocess all numeric columns in the dataset
    # tof_preprocess(undo_noise = FALSE) |>
    # make a scatterplot
    ggplot(aes(x = cd38, y = cd138)) +
    # geom_point(alpha = 0.5) +
    # geom_contour() +
    geom_density_2d(bins = 10, colour = "blue") +
    # scale_x_continuous(limits = c(NA, 1.5)) +
    # scale_y_continuous(limits = c(NA, 4)) +
    theme_bw() + 
    facet_wrap(vars(population, visit))


adapt |>
    # preprocess all numeric columns in the dataset
    # tof_preprocess(undo_noise = FALSE) |>
    # make a scatterplot
    ggplot(aes(x = cd19, y = cd38)) +
    # geom_point(alpha = 0.5) +
    # geom_contour() +

    geom_density_2d_filled(bins = 8,
                           alpha = 0.5,
                           colour = "blue") +
        geom_density_2d(bins = 8) +
    # scale_x_continuous(limits = c(NA, 1.5)) +
    # scale_y_continuous(limits = c(NA, 4)) +
    theme_bw()

adapt |>
    # preprocess all numeric columns in the dataset
    # tof_preprocess(undo_noise = FALSE) |>
    # make a scatterplot
    ggplot(aes(x = cd19, y = cd38)) +
    # geom_point(alpha = 0.5) +
    # geom_contour() +
    geom_density_2d_filled(bins = 8, 
                           alpha = 0.5,
                           colour = "blue") +
    # scale_x_continuous(limits = c(NA, 1.5)) +
    # scale_y_continuous(limits = c(NA, 4)) +
    theme_bw()


```

### Create seurat obj

```{r}
adapt_seurat <- adapt |> 
    as_seurat()

# adapt_seurat <- adapt_seurat |> 
#     FindVariableFeatures()

pbmc_small <- pbmc_small

```

# change channel name to marker name

```{r}


# name.marker <- as.vector(ifelse(!(is.na(pData(parameters(fcs_set[[1]]))$desc)),
#              pData(parameters(fcs_set[[1]]))$desc,colnames(fcs_set[[1]])))
# 
# 
# 
# colnames(fcs_set) <- name.marker




```

# downsample

```{r}

fsApply(fcs_set, nrow)


# fcs_set = as.flowSet(fcs_set)
# 
# sampling.ceiling <- 10000
# 
# set.seed(0)
# 
# fcs_set <- fsApply(fcs_set, function(ff) {
#   idx <- sample.int(nrow(ff), min(sampling.ceiling, nrow(ff)))
#   ff[idx,]  
# })
# 
# fsApply(fcs_set, nrow)

```

# metadata

```{r}
pData(fcs_set) = pData(fcs_set) %>%
    mutate(sample_id = gsub("\\.fcs", "", name)) %>%
    mutate(sample_id = gsub("export_", "", sample_id)) %>%
    mutate(population = str_extract(sample_id, "CD19.")) %>%
    separate(sample_id, into = c("study_id", "patient_id", "visit", "date", "panel", "drop", "source"), sep = "_", extra = "drop", remove = T) %>%
    select(-drop) %>%
    unite("sample_id", study_id:population, remove = F)

```

# transform

```{r}

marker_vec = c("IgD", "CD38", "CD20", "CXCR3", "IgM", "CD21", "CD34", "CD24", "CD27", "CXCR4", "CXCR5", "CD138", "CD11c","BCMA")


fcsTrans <- fsApply(fcs_set, function(x, cofactor = 150){
  expr <- exprs(x)
  expr <- asinh(expr[, marker_vec] / cofactor)
  exprs(x) <- expr
  x}) 



```

# cell count table

```{r}


sample_ids <- rep(pData(fcsTrans)$sample_id, fsApply(fcsTrans, nrow))

cell_table <- table(sample_ids)

cell_table

```

# metadata for Seurat object

```{r}

expr <- fsApply(fcsTrans, exprs)
dim(expr)


meta_seurat = data.frame(matrix(nrow = dim(expr)[1], ncol = ncol(pData(fcsTrans))))
colnames(meta_seurat) = colnames(pData(fcsTrans))

for (i in colnames(pData(fcsTrans))) {
pull_column = pData(fcsTrans) %>%
  dplyr::pull(!!sym(i))
pull_column = factor(pull_column)
meta_seurat[[i]] = rep(pull_column, fsApply(fcsTrans, nrow))
  
}


```

# create Seurat Object

```{r}

expr_fcs <- t(expr)


Cells <- paste0("sample_", c(1:ncol(expr_fcs)))
SampleName <- rep("sample", ncol(expr_fcs))
TimePoint <- rep("time", ncol(expr_fcs))

colnames(expr_fcs) <- Cells

metadata <- cbind(Cells, SampleName, TimePoint, meta_seurat)

metadata <- data.frame(metadata)

Obj_fcs <- CreateSeuratObject(expr_fcs)

CellsMeta = Obj_fcs@meta.data


Obj_fcs <- AddMetaData(Obj_fcs, cbind(CellsMeta, metadata))


```

# feature selection / dimension reduction / clustering

```{r}
VariableFeatures(adapt_seurat) <- rownames(adapt_seurat)

Obj_fcs@assays$RNA$data = Obj_fcs@assays$RNA$counts



```

```{r}

class(adapt)

clust <- c("cd19", "cd20", "cxcr3", "cd21", "cd38", "cd138" )

pheno_clust <- adapt |>
    tof_cluster(method = "phenograph", cluster_cols = clust, 
                augment = T)

class(pheno_clust)

pheno_clust |>
    select(sample_id, .phenograph_cluster, everything()) |>
    head()
```

```{r}
# perform the dimensionality reduction
phenograph_tsne <-
    pheno_clust |>
    tof_reduce_dimensions(method = "tsne")

# select only the tsne embedding columns using a tidyselect helper (contains)
phenograph_tsne |>
    select(contains("tsne")) |>
    head()

```

```{r}
# plot the tsne embeddings using color to distinguish between clusters
phenograph_tsne |>
    slice_sample( n = 10000) |> 
    ggplot(aes(x = .tsne1, y = .tsne2, color = .phenograph_cluster)) +
    # geom_point(shape = 21) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL)
```

```{r}
VariableFeatures(Obj_fcs) <- rownames(Obj_fcs)

adapt_vars <- rownames(adapt_seurat)

# Obj_fcs@assays$RNA$data = Obj_fcs@assays$RNA$counts


# Obj_fcs <- Obj_fcs %>% 
#     ScaleData() %>% 
#     RunPCA(verbose = TRUE) %>% 
#     FindNeighbors(dims = 1:13, verbose = TRUE) %>% 
#     FindClusters(verbose = TRUE, resolution = 0.5)
```

# down-sample for RunUMAP & RunTSNE

```{r}


# pData(fcsTrans)$sample_id <- factor(pData(fcsTrans)$sample_id, levels = pData(fcsTrans)$sample_id)
# 
# sample_ids <- rep(pData(fcsTrans)$sample_id, fsApply(fcsTrans, nrow))
# 
# inds <- split(1:length(sample_ids), sample_ids)
# 
# table <- table(sample_ids)



# downsample equal number


# eventable <- setNames(rep(min(table), length(table)), names(table))
# 
# tsne_ncells <- eventable
# 
# 
# 
# 
# down_inds <- lapply(names(inds), function(x){
# s <- sample(inds[[x]], tsne_ncells[x], replace = FALSE)
# })
# 
# down_inds <- unlist(down_inds)
# 
# 
# Obj_fcs_down <- subset(Obj_fcs, cells = down_inds)

# Obj_fcs_down <- Obj_fcs_down %>% 
#   RunUMAP(dims = 1:13, verbose = TRUE) %>% 
#   RunTSNE(dims = 1:13, verbose = TRUE)

VariableFeatures(adapt_seurat) <- rownames(adapt_seurat)

adapt_seurat <- adapt_seurat %>% 
    ScaleData() %>% 
    RunPCA(verbose = TRUE) %>% 
    FindNeighbors(dims = 1:13, verbose = TRUE) %>% 
    FindClusters(verbose = TRUE, resolution = 0.5)

adapt_seurat <- adapt_seurat %>% 
  RunUMAP(dims = 1:13, verbose = TRUE) %>% 
  RunTSNE(dims = 1:13, verbose = TRUE)

# DimPlot(Obj_fcs_down, reduction = "umap", pt.size = 1)
# DimPlot(Obj_fcs_down, reduction = "tsne", pt.size = 1)

DimPlot(adapt_seurat, reduction = "umap", pt.size = 1)
DimPlot(adapt_seurat, reduction = "tsne", pt.size = 1)


```

```{r}


adapt_seurat <- adapt_seurat %>% 
    ScaleData() %>% 
    RunPCA(verbose = TRUE) %>% 
    FindNeighbors(dims = 1:13, verbose = TRUE) %>% 
    FindClusters(verbose = TRUE, resolution = 0.5)
```

# ggplot

```{r}


meta_data = Obj_fcs_down[[]]
umap_cordinates = as.data.frame(Obj_fcs_down@reductions$umap@cell.embeddings)
tsne_cordinates = as.data.frame(Obj_fcs_down@reductions$tsne@cell.embeddings)

df = cbind(meta_data, umap_cordinates, tsne_cordinates)

cluster_n = df %>% dplyr::distinct(seurat_clusters) %>% nrow()


if(cluster_n > 27) {
# if number of cluster exceed 27 use this code
color_clusters = createPalette(cluster_n, c("#00ffff", "#ff00ff", "#ffff00"))
color_clusters = unname(color_clusters)
names(color_clusters) = c(0:(cluster_n-1)) } else {


# if number of cluster <= 27 use this code
color_clusters = c(brewer.pal(9, "Set2"), brewer.pal(9, "Set1"), brewer.pal(9, "Set3"))
color_clusters = color_clusters[c(1:(cluster_n))]
names(color_clusters) = c(0:(cluster_n-1))
    }



ggplot(df,  aes(x = tSNE_1, y = tSNE_2, color = seurat_clusters)) +
geom_point(size = 1, alpha = 1, shape = 16, stroke = 0) +
scale_color_manual(values = color_clusters) + 
  facet_wrap(vars(population)) + 
  guides(color = guide_legend(title = "Cluster", override.aes = list(size = 4), ncol = 2)) + 
  tmp_theme + 
  theme(aspect.ratio = 1,
        legend.position = "right")

ggsave("output/pos/seurat_clusters.pdf")


ggplot(df,  aes(x = tSNE_1, y = tSNE_2, color = seurat_clusters)) +
geom_point(size = 1, alpha = 1, shape = 16, stroke = 0) +
scale_color_manual(values = color_clusters) + 
  facet_grid(population ~ visit) + 
  guides(color = guide_legend(title = "Cluster", override.aes = list(size = 4), ncol = 2)) + 
  tmp_theme + 
  theme(aspect.ratio = 1,
        legend.position = "right")

ggsave("output/pos/seurat_clusters_by_visit.pdf")







```

# marker expression

```{r fig.width=12, fig.height=4}



df2 = as.matrix(Obj_fcs_down@assays$RNA$scale.data)
df2 = as.data.frame(t(df2))

df2 = cbind(df2, umap_cordinates, tsne_cordinates, meta_data)
colnames(df2) = gsub("-", "_", colnames(df2))
marker_vec2 = gsub("-", "_", marker_vec)


plots = list()
for (i in 1:length(marker_vec2)) {

  
plots[[i]] = ggplot(df2,  aes_string(x = "tSNE_1", y = "tSNE_2", color = marker_vec2[i])) +
geom_point(size = 0.2) +
ggtitle(marker_vec2[i]) + 
scale_color_gradientn(marker_vec2[i], values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 11, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) + 
  guides(color = FALSE)

}

pdf("output/pos/marker_expression.pdf", width = 12, height = 6)

grid.arrange(grobs = plots, nrow = 2)

dev.off



  

```
