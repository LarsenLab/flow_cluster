---
title: "Flow Cytometry Data Analysis Workflow"
author: "Geeta Karadkhele & Chris Larsen"
format: html
editor: visual
---

###Steps

Step 1: Read .fcs Files
Load .fcs files using read.flowSet() from the flowCore package to handle flow cytometry data.

Step 2: Arcsinh Transformation for Normalization.Normalize the data using an Arcsinh transformation, a common approach for cytometry data. \[<https://support.cytobank.org/hc/en-us/articles/206148057-About-the-Arcsinh-transform>\]

Step 3: Create a Seurat Object
Using the normalized counts, create a Seurat object to prepare for downstream analysis, including clustering and dimensionality reduction.

Step 4: Dimensionality Reduction, Clustering, and Visualization
Run dimensionality reduction methods (e.g., t-SNE or UMAP) and clustering algorithms to visualize the cell data.

Step 5: Integrate Seurat Objects
Integrate multiple Seurat objects to understand similarities and differences among cell types. Additional resources for file format handling:[mojaveazure/seurat-disk: Interfaces for HDF5-based Single Cell File Formats (github.com)](https://github.com/mojaveazure/seurat-disk)

### Additional resources

<https://github.com/keyes-timothy/tidytof>

<https://stemangiola.github.io/tidyseurat/>

### library

```{r include=FALSE, warning=FALSE}
# 
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#BiocManager::install(version = "3.19")
#BiocManager::install("HDCytoData")
library(HDCytoData)
#BiocManager::install(c("flowCore","ncdfFlow","flowWorkspace","Seurat"))
library(flowCore)
library(ncdfFlow)
library(flowWorkspace)
library(Seurat)
library(tidytof)
library(tidyFlowCore)
library(tidyseurat)
library(FlowSOM)
# if (!require(devtools)) install.packages("devtools")
# BiocManager::install("keyes-timothy/tidyFlowCore")
library(tidyFlowCore)
library(readxl)
library(cowplot)
library(ggplot2)
library(stringr)
# remotes::install_github("mojaveazure/seurat-disk")

library(RColorBrewer)
library(pheatmap)
library(ggpubr)
library(ggsignif)
library(Polychrome)
library(gridExtra)



library(tidyverse)
library(janitor)
library(reshape2)
library(matrixStats)
library(rstatix)
library(here)
library(embed)


source(here("source_func.R"))

# aesthetics

library(showtext)
library(sysfonts)
font_add("Avenir", "~/Library/Fonts/Avenir.ttf") # path to your Avenir.ttf file
# download Avenir-Book.ttf from https://github.com/platanus/fonts/blob/master/Avenir/Avenir-Book.ttf
# rename it as "Avenir.ttf" & put it under "/Users/weiwen_zhang/Library/Fonts"




```

```{r}
# if (!require(devtools)) install.packages("devtools")
# devtools::install_github("keyes-timothy/tidytof")


```

```{r}
# if (!require(devtools)) install.packages("devtools")
# if (!requireNamespace("BiocManager", quietly = TRUE)) {
#     install.packages("BiocManager")
# }
# 
# 
#BiocManager::install("tidyseurat")
# BiocManager::install("keyes-timothy/tidyFlowCore")

```

### Font and Theme Settings

```{r include=FALSE, warning=FALSE}
# initialize showtext
showtext_auto()

size = 10
tmp_theme = theme(
    
    text = element_text(size = size, family = "Avenir"),
    # y
    axis.title.y = element_text(size = size),
    axis.text.y = element_text(size = size),
    axis.ticks.y = element_line(size = 0.2, linetype = "solid", colour = "black"),
    axis.line.y = element_line(size = 0.4, linetype = "solid", colour = "black"),
    
    # x
    axis.title.x = element_text(size = size),
    axis.text.x = element_text(size = size),
    axis.ticks.x = element_line(size = 0.2, linetype = "solid", colour = "black"),
    axis.line.x = element_line(size = 0.4, linetype = "solid", colour = "black"),
    
    # panel
    panel.grid = element_blank(),  # remove background grid
    panel.grid.major = element_blank(),  # remove major grid lines
    panel.grid.minor = element_blank(),  # remove minor grid lines
    panel.border = element_blank(),  # remove panel borders
    panel.background = element_blank(),
    
    # facet
    strip.background = element_rect(colour = "gray", fill = "white", linewidth = 0.5, linetype = "solid"), 
    aspect.ratio = 1
  )
```

### Workflow

#### Loading and Preprocessing Data
##### Step 1: Load FCS Files

```{r include=FALSE, warning=FALSE}
input_dir <- here("raw/ITN089ST_adapt")
fcs_files <- list.files(input_dir, pattern = ".fcs", full.names = TRUE)
fcs_files <- fcs_files[str_detect(fcs_files, "CD19\\+")]
```

##### Step 2: Read and Tidy FCS Data with tidytof

```{r include=FALSE, warning=FALSE}
adapt <- tof_read_data(input_dir) |> 
    clean_names() |> 
    mutate(across(where(is.numeric), ~ asinh(. / 150)))

adapt <- tof_preprocess(adapt, transform_fun = scale)  
```

##### Step 3: Create Sample Metadata Variables
```{r}
adapt <- adapt |> 
    mutate(sample_id = str_remove(file_name, "\\.fcs")) |> 
    mutate(sample_id = str_remove(sample_id, "export_"))  |> 
    mutate(population = str_extract(sample_id, "CD19."))  |> 
   mutate(sample_id = str_remove(sample_id, "_B_cell Panel_BM_CD19-")) |> 
    mutate(time_point = str_extract(file_name, "V\\w+")) |> 
    mutate(visit = str_extract(time_point, "V\\w{0,2}(?=_)"))  |> 
    rename_with(~ str_remove(., "_fj_comp_.+")) |>
    rename_with(~ str_remove(., "\\|.+")) |> 
    rename_with(~ str_replace(., "-", "_")) |> 
    rename_with(str_to_lower)
```

#### Clustering and Dimensionality Reduction
##### Step 4: Cluster Cells 

```{r}
clust_cols <- c("cd19", "cd20", "cd38", "cxcr3", "ig_m", "ig_d", "cd21", "cd34", "cd24", "cd27", "cxcr4", "cxcr5", "cd138", "cd11c", "bcma")

adapt_clusters_cd19_pos <- adapt |> filter(population == "CD19+") |>
    tof_cluster(method = "flowsom", cluster_cols = clust_cols, num_metaclusters = 8)
adapt_clusters_cd19_neg <- adapt |> filter(population == "CD19-") |>
    tof_cluster(method = "flowsom", cluster_cols = clust_cols, num_metaclusters = 8)

```

##### Step 5: Downsample and Reduce Dimensions (t-SNE)

```{r}
adapt_clusters_cd19_pos_tsne <- adapt_clusters_cd19_pos |>
    tof_downsample(method = "constant", group_cols = visit, num_cells = 1000) |>
    tof_reduce_dimensions(method = "tsne")

adapt_clusters_cd19_neg_tsne <- adapt_clusters_cd19_neg |>
    tof_downsample(method = "constant", group_cols = visit, num_cells = 1000) |>
    tof_reduce_dimensions(method = "tsne")
```

### Visualization
#### Plotting Clusters and Expression Levels

```{r}
adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL)+ 
scale_color_manual(values = colorRampPalette(brewer.pal(n = 11, name = "Spectral"))(length(unique(adapt_clusters_cd19_pos_tsne$.flowsom_metacluster)))) +
  tmp_theme + 
  theme(aspect.ratio = 1) + 
  guides(color = FALSE)

adapt_clusters_cd19_pos_tsne |>
  ggplot(aes(x = .tsne1, y = .tsne2, color = as.factor(.flowsom_metacluster))) +  # Convert to factor if discrete
  geom_point() +
  theme_bw() +
  labs(fill = NULL) +
  facet_wrap(~ visit) +
  scale_color_manual(values = colorRampPalette(brewer.pal(n = 12, name = "Spectral"))(length(unique(adapt_clusters_cd19_pos_tsne$.flowsom_metacluster)))) +
  tmp_theme +
  theme(aspect.ratio = 1)  + 
  guides(color = "none")


adapt_clusters_cd19_pos_tsne |>
    ggplot(aes(x = .tsne1, y = .tsne2, color = cd38)) +
    geom_point() +
    theme_bw() +
    labs(fill = NULL) +
    facet_wrap(~ visit) + 
scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 9, name = "Spectral")))(50)) +
  tmp_theme + 
  theme(aspect.ratio = 1) 
```


##### Plot by Cluster with Labels

```{r}
clust_cols <- c("cd19", "cd20", "cd38", "cxcr3", "ig_m", "ig_d", "cd21", "cd34", 
                "cd24", "cd27", "cxcr4", "cxcr5", "cd138", "cd11c", "bcma")

adapt_clusters_long <- adapt_clusters_cd19_pos_tsne |>
  select(cd19:bcma,.flowsom_metacluster:.tsne2,visit)|>
  pivot_longer(cols=c(cd19:bcma),names_to = "marker", values_to = "expression")|> 
    mutate(.flowsom_metacluster = as.factor(.flowsom_metacluster),
           marker = as.factor(marker),
           visit=as.factor(visit)) 
    


ggplot(adapt_clusters_long, aes(x = .tsne1, y = .tsne2, color = expression)) +
  geom_point() +
  theme_bw() +
  scale_color_gradientn(values = c(1, 0), na.value = "darkred",
colours = colorRampPalette((brewer.pal(n = 9, name = "Spectral")))(50)) +
  facet_wrap(~ marker, scales = "free") +
  labs(color = "Expression") +
  theme(aspect.ratio = 0.5)


```

##### Expression by Marker 
```{r}
cluster_labels <- adapt_clusters_long |>
  group_by(marker, .flowsom_metacluster) |>
  summarise(
    label_x = median(.tsne1, na.rm = TRUE),
    label_y = median(.tsne2, na.rm = TRUE),
    .groups = 'drop'
  )


ggplot(adapt_clusters_long, aes(x = .tsne1, y = .tsne2, color = .flowsom_metacluster)) +
  geom_point(aes(alpha = expression)) +  
  facet_wrap(~ marker, scales = "free") +
  geom_text(
    data = cluster_labels,
    aes(x = label_x, y = label_y, label = .flowsom_metacluster),
    color = "black",  
    size = 3,
    vjust = -0.5
  ) +
  theme_bw() +
  scale_color_manual(values = colorRampPalette(brewer.pal(n = 12, name = "Set3"))(length(unique(adapt_clusters_long$.flowsom_metacluster)))) +
  #scale_alpha_continuous(range = c(0.2, 1)) +  # Broaden alpha range for better brightness contrast
  #labs(color = "Cluster", alpha = "Expression") +
  theme(aspect.ratio = 0.50) +
    guides(color = "none",
           size="none")
```

